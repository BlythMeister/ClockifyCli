using ClockifyCli.Commands;
using NUnit.Framework;
using Spectre.Console.Testing;
using RichardSzalay.MockHttp;
using ClockifyCli.Services;
using Spectre.Console.Cli;
using Moq;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class AddTaskCommandTests
{
    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var jiraClient = new JiraClient(httpClient, "test-user", "test-token");
        var console = new TestConsole();

        // Act & Assert
        Assert.DoesNotThrow(() => new AddTaskCommand(clockifyClient, jiraClient, console));
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }

    [Test]
    public void AddTaskCommand_WithInjectedDependencies_ShouldInitializeCorrectly()
    {
        // Arrange - separate HttpClients to avoid base address conflicts
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        var jiraMockHttp = new MockHttpMessageHandler();
        var jiraHttpClient = new HttpClient(jiraMockHttp);
        
        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var jiraClient = new JiraClient(jiraHttpClient, "test-user", "test-token");
        var testConsole = new TestConsole();
        
        // Act & Assert
        Assert.DoesNotThrow(() => new AddTaskCommand(clockifyClient, jiraClient, testConsole));
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
        jiraMockHttp.Dispose();
        jiraHttpClient.Dispose();
    }

    [Test]  
    public async Task AddTask_WithNoWorkspace_ShouldDisplayErrorMessage()
    {
        // Arrange - separate HttpClients to avoid base address conflicts
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        var jiraMockHttp = new MockHttpMessageHandler();
        var jiraHttpClient = new HttpClient(jiraMockHttp);
        
        // Mock empty workspaces response
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                        .Respond("application/json", "[]");

        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var jiraClient = new JiraClient(jiraHttpClient, "test-user", "test-token");
        var testConsole = new TestConsole();
        
        var command = new AddTaskCommand(clockifyClient, jiraClient, testConsole);
        var mockRemainingArgs = new Mock<IRemainingArguments>();
        var context = new CommandContext([], mockRemainingArgs.Object, "", null);
        var settings = new AddTaskCommand.Settings();

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify error message was displayed
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"), "Should display no workspace error message");
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
        jiraMockHttp.Dispose();
        jiraHttpClient.Dispose();
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Models;
using ClockifyCli.Services;
using Moq;
using NUnit.Framework;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class ArchiveCompletedJirasCommandTests
{
    private Mock<IClockifyClient> mockClockifyClient;
    private Mock<IJiraClient> mockJiraClient;
    private TestConsole testConsole;
    private ArchiveCompletedJirasCommand command;

    [SetUp]
    public void Setup()
    {
        mockClockifyClient = new Mock<IClockifyClient>();
        mockJiraClient = new Mock<IJiraClient>();
        testConsole = new TestConsole();
        command = new ArchiveCompletedJirasCommand(mockClockifyClient.Object, mockJiraClient.Object, testConsole);
    }

    [TearDown]
    public void TearDown()
    {
        testConsole?.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithValidWorkspace_ReturnsZero()
    {
        // Arrange
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();

        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);

        // Act
        var result = await command.ExecuteAsync(context);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetLoggedInUserWorkspaces(), Times.Once);
        mockClockifyClient.Verify(x => x.GetProjects(mockWorkspace), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_NoWorkspaceFound_ShowsErrorAndReturnsZero()
    {
        // Arrange
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);

        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo>());

        // Act
        var result = await command.ExecuteAsync(context);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"));
    }

    [Test]
    public async Task ExecuteAsync_WithProjects_ChecksTasks()
    {
        // Arrange
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProject = new ProjectInfo("project1", "Test Project");
        var mockProjects = new List<ProjectInfo> { mockProject };
        var mockTasks = new List<TaskInfo>();

        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTasks(mockWorkspace, mockProject)).ReturnsAsync(mockTasks);

        // Act
        var result = await command.ExecuteAsync(context);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetTasks(mockWorkspace, mockProject), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_WithActiveTasksButNoJiraConnection_SkipsTasks()
    {
        // Arrange
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProject = new ProjectInfo("project1", "Test Project");
        var mockProjects = new List<ProjectInfo> { mockProject };
        
        var mockTask = new TaskInfo("task1", "TEST-123 Test Task", "Active");
        var mockTasks = new List<TaskInfo> { mockTask };

        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTasks(mockWorkspace, mockProject)).ReturnsAsync(mockTasks);
        
        // Mock Jira client to return null (no connection or issue not found)
        mockJiraClient.Setup(x => x.GetIssue("TEST-123")).ReturnsAsync((JiraIssue?)null);

        // Act
        var result = await command.ExecuteAsync(context);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockJiraClient.Verify(x => x.GetIssue("TEST-123"), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_WithCompletedJiraIssue_ProcessesArchiving()
    {
        // Arrange
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProject = new ProjectInfo("project1", "Test Project");
        var mockProjects = new List<ProjectInfo> { mockProject };
        
        var mockTask = new TaskInfo("task1", "TEST-123 Test Task", "Active");
        var mockTasks = new List<TaskInfo> { mockTask };

        var mockJiraIssue = new JiraIssue(
            12345,
            "TEST-123",
            new JiraIssueFields(
                new JiraTimeTracking("0h"),
                new JiraStatus("Done", new JiraStatusCategory("done", "Done")),
                "Test Summary"
            )
        );

        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTasks(mockWorkspace, mockProject)).ReturnsAsync(mockTasks);
        mockJiraClient.Setup(x => x.GetIssue("TEST-123")).ReturnsAsync(mockJiraIssue);
        mockClockifyClient.Setup(x => x.UpdateTaskStatus(mockWorkspace, mockProject, mockTask, "DONE")).Returns(Task.CompletedTask);

        // Act
        var result = await command.ExecuteAsync(context);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockJiraClient.Verify(x => x.GetIssue("TEST-123"), Times.Once);
        mockClockifyClient.Verify(x => x.UpdateTaskStatus(mockWorkspace, mockProject, mockTask, "DONE"), Times.Once);
    }

    [Test]
    public void Constructor_WithNullClockifyClient_ThrowsArgumentNullException()
    {
        // Assert
        Assert.Throws<ArgumentNullException>(() => 
            new ArchiveCompletedJirasCommand(null!, mockJiraClient.Object, testConsole));
    }

    [Test]
    public void Constructor_WithNullJiraClient_ThrowsArgumentNullException()
    {
        // Assert
        Assert.Throws<ArgumentNullException>(() => 
            new ArchiveCompletedJirasCommand(mockClockifyClient.Object, null!, testConsole));
    }

    [Test]
    public void Constructor_WithNullConsole_ThrowsArgumentNullException()
    {
        // Assert
        Assert.Throws<ArgumentNullException>(() => 
            new ArchiveCompletedJirasCommand(mockClockifyClient.Object, mockJiraClient.Object, null!));
    }
}
using ClockifyCli.Commands;
using NUnit.Framework;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class ConfigScheduleCommandTests
{
    private TestConsole testConsole = null!;

    [SetUp]
    public void Setup()
    {
        testConsole = new TestConsole();
    }

    [TearDown]
    public void TearDown()
    {
        testConsole.Dispose();
    }

    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Act & Assert
        Assert.DoesNotThrow(() => new ConfigScheduleCommand(testConsole));
    }

    [Test, Explicit]
    public async Task ExecuteAsync_ShouldHandleBasicExecution()
    {
        // Arrange
        var command = new ConfigScheduleCommand(testConsole);
        var settings = new ConfigScheduleCommand.Settings();

        // Act
        var result = await command.ExecuteAsync(null!, settings);

        // Assert
        Assert.That(result, Is.AnyOf(0, -1)); // May fail if not on Windows or missing permissions
        
        // Should display some output regardless of success/failure
        var output = testConsole.Output;
        Assert.That(output, Is.Not.Empty);
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Services;
using NUnit.Framework;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class ConfigSetCommandTests
{
    private string testConfigDirectory = null!;
    private ConfigurationService configService = null!;
    private TestConsole testConsole = null!;

    [SetUp]
    public void Setup()
    {
        // Create a temporary directory for test config files
        testConfigDirectory = Path.Combine(Path.GetTempPath(), $"ClockifyCliTests_{Guid.NewGuid()}");
        Directory.CreateDirectory(testConfigDirectory);
        
        configService = new ConfigurationService(testConfigDirectory);
        testConsole = new TestConsole();
    }

    [TearDown]
    public void TearDown()
    {
        // Clean up test console
        testConsole.Dispose();
        
        // Clean up test directory
        if (Directory.Exists(testConfigDirectory))
        {
            Directory.Delete(testConfigDirectory, true);
        }
    }

    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Act & Assert
        Assert.DoesNotThrow(() => new ConfigSetCommand(configService, testConsole));
    }

    [Test]
    public async Task ExecuteAsync_ShouldCompleteSuccessfully()
    {
        // Arrange
        // Simulate user input for the prompts
        testConsole.Input.PushTextWithEnter("test-clockify-key");
        testConsole.Input.PushTextWithEnter("test@example.com");
        testConsole.Input.PushTextWithEnter("test-jira-token");
        testConsole.Input.PushTextWithEnter("test-tempo-key");
        
        var command = new ConfigSetCommand(configService, testConsole);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify success message was displayed
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("Configuration saved successfully!"));
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Services;
using NUnit.Framework;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class ConfigViewCommandTests
{
    private string testConfigDirectory = null!;
    private ConfigurationService configService = null!;
    private TestConsole testConsole = null!;

    [SetUp]
    public void Setup()
    {
        // Create a temporary directory for test config files
        testConfigDirectory = Path.Combine(Path.GetTempPath(), $"ClockifyCliTests_{Guid.NewGuid()}");
        Directory.CreateDirectory(testConfigDirectory);
        
        configService = new ConfigurationService(testConfigDirectory);
        testConsole = new TestConsole();
    }

    [TearDown]
    public void TearDown()
    {
        // Clean up test console
        testConsole.Dispose();
        
        // Clean up test directory
        if (Directory.Exists(testConfigDirectory))
        {
            Directory.Delete(testConfigDirectory, true);
        }
    }

    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Act & Assert
        Assert.DoesNotThrow(() => new ConfigViewCommand(configService, testConsole));
    }

    [Test]
    public async Task ExecuteAsync_ShouldDisplayConfiguration()
    {
        // Arrange
        var command = new ConfigViewCommand(configService, testConsole);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify configuration display
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("Current Configuration"));
        Assert.That(output, Does.Contain("Configuration file:"));
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Services;
using NUnit.Framework;
using RichardSzalay.MockHttp;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class DeleteTimerCommandTests
{
    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var console = new TestConsole();

        // Act & Assert
        Assert.DoesNotThrow(() => new DeleteTimerCommand(clockifyClient, console));
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithNoCompletedTimers_ShouldDisplayNoTimersMessage()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        
        // Mock user and workspace calls
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace123"}""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                .Respond("application/json", userJson);
        
        var workspacesJson = """[{"id":"workspace1","name":"Test Workspace"}]""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                .Respond("application/json", workspacesJson);
        
        // Mock no completed timers (empty array)
        mockHttp.When(HttpMethod.Get, "*")
                .Respond("application/json", "[]");

        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var console = new TestConsole();
        var command = new DeleteTimerCommand(clockifyClient, console);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Should complete without errors
        var output = console.Output;
        Assert.That(output, Is.Not.Empty);
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Services;
using NUnit.Framework;
using RichardSzalay.MockHttp;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class DiscardTimerCommandTests
{
    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var console = new TestConsole();

        // Act & Assert
        Assert.DoesNotThrow(() => new DiscardTimerCommand(clockifyClient, console));
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithNoRunningTimer_ShouldDisplayNoTimerMessage()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        
        // Mock user and workspace calls
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace1"}""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                .Respond("application/json", userJson);
        
        var workspacesJson = """[{"id":"workspace1","name":"Test Workspace"}]""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                .Respond("application/json", workspacesJson);
        
        // Mock no running timer
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/user/user123/time-entries?in-progress=true")
                .Respond("application/json", "[]");

        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var console = new TestConsole();
        var command = new DiscardTimerCommand(clockifyClient, console);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify no timer message
        var output = console.Output;
        Assert.That(output, Does.Contain("No time entry is currently running"));
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Models;
using ClockifyCli.Services;
using Moq;
using NUnit.Framework;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class EditTimerCommandTests
{
    private Mock<IClockifyClient> mockClockifyClient;
    private TestConsole testConsole;
    private EditTimerCommand command;

    [SetUp]
    public void Setup()
    {
        mockClockifyClient = new Mock<IClockifyClient>();
        testConsole = new TestConsole();
        command = new EditTimerCommand(mockClockifyClient.Object, testConsole);
    }

    [TearDown]
    public void TearDown()
    {
        testConsole?.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithValidSettings_ReturnsZero()
    {
        // Arrange
        var settings = new EditTimerCommand.Settings { Days = 7 };
        var mockRemainingArgs = new Mock<IRemainingArguments>();
        var context = new CommandContext([], mockRemainingArgs.Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetLoggedInUser(), Times.Once);
        mockClockifyClient.Verify(x => x.GetLoggedInUserWorkspaces(), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_NoWorkspaceFound_ShowsErrorAndReturnsZero()
    {
        // Arrange
        var settings = new EditTimerCommand.Settings { Days = 7 };
        var mockRemainingArgs = new Mock<IRemainingArguments>();
        var context = new CommandContext([], mockRemainingArgs.Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo>());

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"));
    }

    [Test]
    public async Task ExecuteAsync_NoTimeEntriesFound_ShowsWarningMessage()
    {
        // Arrange
        var settings = new EditTimerCommand.Settings { Days = 14 };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No completed time entries found"));
        Assert.That(output, Does.Contain("Try increasing the number of days"));
    }

    [Test]
    public async Task ExecuteAsync_WithRunningTimeEntry_FiltersOutRunningEntry()
    {
        // Arrange
        var settings = new EditTimerCommand.Settings { Days = 7 };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();
        
        // Create a running time entry (no end time) and a completed one
        var runningEntry = new TimeEntry(
            "entry1",
            "Running Task",
            "task1",
            "project1",
            "regular",
            new TimeInterval(DateTime.UtcNow.AddHours(-2).ToString("o"), null!)
        );
        
        var completedEntry = new TimeEntry(
            "entry2",
            "Completed Task",
            "task2",
            "project1",
            "regular",
            new TimeInterval(DateTime.UtcNow.AddHours(-4).ToString("o"), DateTime.UtcNow.AddHours(-3).ToString("o"))
        );

        var mockTimeEntries = new List<TimeEntry> { runningEntry, completedEntry };

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        // Should process the entries but filter out running ones
        mockClockifyClient.Verify(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public void Settings_DefaultValues_AreCorrect()
    {
        // Arrange & Act
        var settings = new EditTimerCommand.Settings();

        // Assert
        Assert.That(settings.Days, Is.EqualTo(7));
    }

    [Test]
    public void Settings_CanSetCustomDays()
    {
        // Arrange & Act
        var settings = new EditTimerCommand.Settings { Days = 30 };

        // Assert
        Assert.That(settings.Days, Is.EqualTo(30));
    }
}
using ClockifyCli.Commands;
using NUnit.Framework;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class FullViewCommandTests
{
    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Arrange
        var console = new TestConsole();

        // Act & Assert
        Assert.DoesNotThrow(() => new FullViewCommand(console));
    }

    [Test, Explicit]
    public async Task ExecuteAsync_ShouldAttemptToOpenBrowser()
    {
        // Arrange
        var console = new TestConsole();
        var command = new FullViewCommand(console);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Should display success message
        var output = console.Output;
        Assert.That(output, Does.Contain("Opening Clockify"));
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Models;
using ClockifyCli.Services;
using NUnit.Framework;
using RichardSzalay.MockHttp;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class StartCommandTests
{
    [Test]
    public void StartCommand_WithInjectedDependencies_ShouldInitializeCorrectly()
    {
        // Arrange
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var testConsole = new TestConsole();
        
        // Act & Assert
        Assert.DoesNotThrow(() => new StartCommand(clockifyClient, testConsole));
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
    }

    [Test]  
    public async Task ExecuteAsync_WithNoWorkspace_ShouldDisplayErrorMessage()
    {
        // Arrange
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        // Mock user info (required first call)
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace123"}""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                        .Respond("application/json", userJson);
        
        // Mock empty workspaces response
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                        .Respond("application/json", "[]");

        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var testConsole = new TestConsole();
        
        var command = new StartCommand(clockifyClient, testConsole);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify error message was displayed
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"), "Should display no workspace error message");
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
    }

    [Test]  
    public async Task ExecuteAsync_WithRunningTimer_WhenUserDeclines_ShouldDisplayCancelMessage()
    {
        // Arrange
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        // Mock user info
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace123"}""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                        .Respond("application/json", userJson);
        
        // Mock workspaces response
        var workspacesJson = """[{"id":"workspace1","name":"Test Workspace"}]""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                        .Respond("application/json", workspacesJson);
        
        // Mock current time entry (running timer)
        var currentEntryJson = """{"id":"entry123","description":"Running timer","timeInterval":{"start":"2024-01-01T09:00:00Z"}}""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/user/user123/time-entries?in-progress=true")
                        .Respond("application/json", $"[{currentEntryJson}]");

        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var testConsole = new TestConsole();
        
        // Simulate user declining to stop current timer
        testConsole.Input.PushTextWithEnter("n"); // Answer "No" to the confirmation prompt
        
        var command = new StartCommand(clockifyClient, testConsole);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify the appropriate messages were displayed
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("A timer is already running!"), "Should display already running warning message");
        Assert.That(output, Does.Contain("Do you want to stop the current timer and start a new one?"), "Should ask for confirmation");
        Assert.That(output, Does.Contain("Timer start cancelled"), "Should display cancellation message");
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
    }

    [Test]  
    public async Task ExecuteAsync_WithRunningTimer_WhenUserAccepts_ShouldStopCurrentTimer()
    {
        // Arrange
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        // Mock user info
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace123"}""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                        .Respond("application/json", userJson);
        
        // Mock workspaces response
        var workspacesJson = """[{"id":"workspace1","name":"Test Workspace"}]""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                        .Respond("application/json", workspacesJson);
        
        // Mock current time entry (running timer)
        var currentEntryJson = """{"id":"entry123","description":"Running timer","timeInterval":{"start":"2024-01-01T09:00:00Z"}}""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/user/user123/time-entries?in-progress=true")
                        .Respond("application/json", $"[{currentEntryJson}]");

        // Mock stop timer endpoint
        var stoppedEntryJson = """{"id":"entry123","description":"Running timer","timeInterval":{"start":"2024-01-01T09:00:00Z","end":"2024-01-01T10:00:00Z"}}""";
        clockifyMockHttp.When(HttpMethod.Patch, "https://api.clockify.me/api/v1/workspaces/workspace1/user/user123/time-entries")
                        .Respond("application/json", stoppedEntryJson);

        // Mock projects endpoint (will get called but we'll stop before selecting)
        var projectsJson = """[]"""; // Empty projects to stop the selection process
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/projects")
                        .Respond("application/json", projectsJson);

        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var testConsole = new TestConsole();
        
        // Simulate user accepting to stop current timer
        testConsole.Input.PushTextWithEnter("y"); // Answer "Yes" to the confirmation prompt
        
        var command = new StartCommand(clockifyClient, testConsole);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify the appropriate messages were displayed
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("A timer is already running!"), "Should display already running warning message");
        Assert.That(output, Does.Contain("Do you want to stop the current timer and start a new one?"), "Should ask for confirmation");
        Assert.That(output, Does.Contain("Current timer stopped"), "Should display timer stopped message");
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Services;
using NUnit.Framework;
using RichardSzalay.MockHttp;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class StatusCommandTests
{
    [Test]
    public void Constructor_WithDependencies_ShouldCreateSuccessfully()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var console = new TestConsole();

        // Act & Assert
        Assert.DoesNotThrow(() => new StatusCommand(clockifyClient, console));
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithNoRunningTimer_ShouldDisplayNoTimerMessage()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        
        // Mock user info
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace1"}""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                .Respond("application/json", userJson);
        
        // Mock workspaces
        var workspacesJson = """[{"id":"workspace1","name":"Test Workspace"}]""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                .Respond("application/json", workspacesJson);
        
        // Mock no running timer
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/user/user123/time-entries?in-progress=true")
                .Respond("application/json", "[]");

        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var console = new TestConsole();
        var command = new StatusCommand(clockifyClient, console);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify no timer message
        var output = console.Output;
        Assert.That(output, Does.Contain("No time entry currently running"));
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithRunningTimer_ShouldDisplayTimerInfo()
    {
        // Arrange
        var mockHttp = new MockHttpMessageHandler();
        var httpClient = new HttpClient(mockHttp);
        
        // Mock user info
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace1"}""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                .Respond("application/json", userJson);
        
        // Mock workspaces
        var workspacesJson = """[{"id":"workspace1","name":"Test Workspace"}]""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                .Respond("application/json", workspacesJson);
        
        // Mock running timer
        var runningTimerJson = """[{"id":"timer123","description":"Working on task","timeInterval":{"start":"2024-01-01T09:00:00Z"},"projectId":"project1","taskId":"task1"}]""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/user/user123/time-entries?in-progress=true")
                .Respond("application/json", runningTimerJson);
        
        // Mock projects
        var projectsJson = """[{"id":"project1","name":"Test Project"}]""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/projects?page=1&page-size=100")
                .Respond("application/json", projectsJson);
        
        // Mock tasks
        var tasksJson = """[{"id":"task1","name":"Test Task"}]""";
        mockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/projects/project1/tasks?page=1&page-size=100")
                .Respond("application/json", tasksJson);

        var clockifyClient = new ClockifyClient(httpClient, "test-key");
        var console = new TestConsole();
        var command = new StatusCommand(clockifyClient, console);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify timer info is displayed
        var output = console.Output;
        Assert.That(output, Does.Contain("Current Clockify Status"));
        Assert.That(output, Does.Contain("Working on task"));
        
        // Cleanup
        mockHttp.Dispose();
        httpClient.Dispose();
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Models;
using ClockifyCli.Services;
using NUnit.Framework;
using RichardSzalay.MockHttp;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class StopCommandTests
{
    [Test]
    public void StopCommand_WithInjectedDependencies_ShouldInitializeCorrectly()
    {
        // Arrange
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var testConsole = new TestConsole();
        
        // Act & Assert
        Assert.DoesNotThrow(() => new StopCommand(clockifyClient, testConsole));
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
    }

    [Test]  
    public async Task ExecuteAsync_WithNoWorkspace_ShouldDisplayErrorMessage()
    {
        // Arrange
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        // Mock user info (required first call)
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace123"}""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                        .Respond("application/json", userJson);
        
        // Mock empty workspaces response
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                        .Respond("application/json", "[]");

        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var testConsole = new TestConsole();
        
        var command = new StopCommand(clockifyClient, testConsole);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify error message was displayed
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"), "Should display no workspace error message");
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
    }

    [Test]  
    public async Task ExecuteAsync_WithNoRunningTimer_ShouldDisplayNoTimerMessage()
    {
        // Arrange
        var clockifyMockHttp = new MockHttpMessageHandler();
        var clockifyHttpClient = new HttpClient(clockifyMockHttp);
        
        // Mock user info
        var userJson = """{"id":"user123","name":"Test User","email":"test@example.com","defaultWorkspace":"workspace123"}""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/user")
                        .Respond("application/json", userJson);
        
        // Mock workspaces response
        var workspacesJson = """[{"id":"workspace1","name":"Test Workspace"}]""";
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces")
                        .Respond("application/json", workspacesJson);
        
        // Mock no current time entry (no running timer)
        clockifyMockHttp.When(HttpMethod.Get, "https://api.clockify.me/api/v1/workspaces/workspace1/user/user123/time-entries?in-progress=true")
                        .Respond("application/json", "[]");

        var clockifyClient = new ClockifyClient(clockifyHttpClient, "test-key");
        var testConsole = new TestConsole();
        
        var command = new StopCommand(clockifyClient, testConsole);

        // Act
        var result = await command.ExecuteAsync(null!);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        
        // Verify no timer message was displayed
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No time entry is currently running"), "Should display no timer running message");
        
        // Cleanup
        clockifyMockHttp.Dispose();
        clockifyHttpClient.Dispose();
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Models;
using ClockifyCli.Services;
using Moq;
using NUnit.Framework;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class TimerMonitorCommandTests
{
    private Mock<IClockifyClient> mockClockifyClient;
    private TestConsole testConsole;
    private TimerMonitorCommand command;

    [SetUp]
    public void Setup()
    {
        mockClockifyClient = new Mock<IClockifyClient>();
        testConsole = new TestConsole();
        command = new TimerMonitorCommand(mockClockifyClient.Object, testConsole);
    }

    [TearDown]
    public void TearDown()
    {
        testConsole?.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithValidSettings_ReturnsZero()
    {
        // Arrange
        var settings = new TimerMonitorCommand.Settings();
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetLoggedInUser(), Times.Once);
        mockClockifyClient.Verify(x => x.GetLoggedInUserWorkspaces(), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_NoWorkspaceFound_ShowsErrorAndReturnsOne()
    {
        // Arrange
        var settings = new TimerMonitorCommand.Settings();
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo>());

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(1));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"));
    }

    [Test]
    public async Task ExecuteAsync_WithSilentMode_SuppressesOutput()
    {
        // Arrange
        var settings = new TimerMonitorCommand.Settings { Silent = true };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        // In silent mode, output should be minimal
    }

    [Test]
    public void Settings_DefaultValues_AreCorrect()
    {
        // Arrange & Act
        var settings = new TimerMonitorCommand.Settings();

        // Assert
        Assert.That(settings.Silent, Is.False);
        Assert.That(settings.AlwaysNotify, Is.False);
    }

    [Test]
    public void Settings_CanSetCustomFlags()
    {
        // Arrange & Act
        var settings = new TimerMonitorCommand.Settings { Silent = true, AlwaysNotify = true };

        // Assert
        Assert.That(settings.Silent, Is.True);
        Assert.That(settings.AlwaysNotify, Is.True);
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Models;
using ClockifyCli.Services;
using Moq;
using NUnit.Framework;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class UploadToTempoCommandTests
{
    private Mock<IClockifyClient> mockClockifyClient;
    private Mock<ITempoClient> mockTempoClient;
    private TestConsole testConsole;
    private UploadToTempoCommand command;

    [SetUp]
    public void Setup()
    {
        mockClockifyClient = new Mock<IClockifyClient>();
        mockTempoClient = new Mock<ITempoClient>();
        testConsole = new TestConsole();
        command = new UploadToTempoCommand(mockClockifyClient.Object, mockTempoClient.Object, testConsole);
    }

    [TearDown]
    public void TearDown()
    {
        testConsole?.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithValidSettings_ReturnsZero()
    {
        // Arrange
        var settings = new UploadToTempoCommand.Settings { Days = 7 };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetLoggedInUser(), Times.Once);
        mockClockifyClient.Verify(x => x.GetLoggedInUserWorkspaces(), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_NoWorkspaceFound_ShowsErrorAndReturnsZero()
    {
        // Arrange
        var settings = new UploadToTempoCommand.Settings();
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo>());

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"));
    }

    [Test]
    public async Task ExecuteAsync_WithCleanupOrphanedFlag_ProcessesCleanup()
    {
        // Arrange
        var settings = new UploadToTempoCommand.Settings { CleanupOrphaned = true };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("Orphaned entry cleanup is enabled"));
    }

    [Test]
    public async Task ExecuteAsync_WithCustomDays_UsesCorrectDateRange()
    {
        // Arrange
        var settings = new UploadToTempoCommand.Settings { Days = 30 };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("Processing last 30 days"));
        mockClockifyClient.Verify(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_WithTimeEntries_ProcessesUpload()
    {
        // Arrange
        var settings = new UploadToTempoCommand.Settings();
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        
        var mockTimeEntry = new TimeEntry(
            "entry1",
            "TEST-123 Test Task",
            "task1",
            "project1",
            "regular",
            new TimeInterval(
                DateTime.UtcNow.AddHours(-2).ToString("o"),
                DateTime.UtcNow.AddHours(-1).ToString("o")
            )
        );
        var mockTimeEntries = new List<TimeEntry> { mockTimeEntry };

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public void Settings_DefaultValues_AreCorrect()
    {
        // Arrange & Act
        var settings = new UploadToTempoCommand.Settings();

        // Assert
        Assert.That(settings.Days, Is.EqualTo(14));
        Assert.That(settings.CleanupOrphaned, Is.False);
    }

    [Test]
    public void Settings_CanSetCustomValues()
    {
        // Arrange & Act
        var settings = new UploadToTempoCommand.Settings { Days = 30, CleanupOrphaned = true };

        // Assert
        Assert.That(settings.Days, Is.EqualTo(30));
        Assert.That(settings.CleanupOrphaned, Is.True);
    }

    [Test]
    public void Constructor_WithNullClockifyClient_ThrowsArgumentNullException()
    {
        // Assert
        Assert.Throws<ArgumentNullException>(() => 
            new UploadToTempoCommand(null!, mockTempoClient.Object, testConsole));
    }

    [Test]
    public void Constructor_WithNullTempoClient_ThrowsArgumentNullException()
    {
        // Assert
        Assert.Throws<ArgumentNullException>(() => 
            new UploadToTempoCommand(mockClockifyClient.Object, null!, testConsole));
    }

    [Test]
    public void Constructor_WithNullConsole_ThrowsArgumentNullException()
    {
        // Assert
        Assert.Throws<ArgumentNullException>(() => 
            new UploadToTempoCommand(mockClockifyClient.Object, mockTempoClient.Object, null!));
    }
}
using ClockifyCli.Commands;
using ClockifyCli.Models;
using ClockifyCli.Services;
using Moq;
using NUnit.Framework;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Testing;

namespace ClockifyCli.Tests.Commands;

[TestFixture]
public class WeekViewCommandTests
{
    private Mock<IClockifyClient> mockClockifyClient;
    private TestConsole testConsole;
    private WeekViewCommand command;

    [SetUp]
    public void Setup()
    {
        mockClockifyClient = new Mock<IClockifyClient>();
        testConsole = new TestConsole();
        command = new WeekViewCommand(mockClockifyClient.Object, testConsole);
    }

    [TearDown]
    public void TearDown()
    {
        testConsole?.Dispose();
    }

    [Test]
    public async Task ExecuteAsync_WithValidSettings_ReturnsZero()
    {
        // Arrange
        var settings = new WeekViewCommand.Settings();
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetLoggedInUser(), Times.Once);
        mockClockifyClient.Verify(x => x.GetLoggedInUserWorkspaces(), Times.Once);
        mockClockifyClient.Verify(x => x.GetProjects(mockWorkspace), Times.Once);
        mockClockifyClient.Verify(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_NoWorkspaceFound_ShowsErrorAndReturnsZero()
    {
        // Arrange
        var settings = new WeekViewCommand.Settings();
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo>());

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        var output = testConsole.Output;
        Assert.That(output, Does.Contain("No workspace found!"));
    }

    [Test]
    public async Task ExecuteAsync_WithIncludeCurrentFlag_CallsCorrectMethods()
    {
        // Arrange
        var settings = new WeekViewCommand.Settings { IncludeCurrent = true };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_WithDetailedFlag_CallsCorrectMethods()
    {
        // Arrange
        var settings = new WeekViewCommand.Settings { Detailed = true };
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        mockClockifyClient.Verify(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public async Task ExecuteAsync_WithNoTimeEntries_ShowsEmptyWeekMessage()
    {
        // Arrange
        var settings = new WeekViewCommand.Settings();
        var context = new CommandContext([], new Mock<IRemainingArguments>().Object, "", null);
        
        var mockUser = new UserInfo("user1", "Test User", "test@example.com", "workspace1");
        var mockWorkspace = new WorkspaceInfo("workspace1", "Test Workspace");
        var mockProjects = new List<ProjectInfo>();
        var mockTimeEntries = new List<TimeEntry>();

        mockClockifyClient.Setup(x => x.GetLoggedInUser()).ReturnsAsync(mockUser);
        mockClockifyClient.Setup(x => x.GetLoggedInUserWorkspaces()).ReturnsAsync(new List<WorkspaceInfo> { mockWorkspace });
        mockClockifyClient.Setup(x => x.GetProjects(mockWorkspace)).ReturnsAsync(mockProjects);
        mockClockifyClient.Setup(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()))
                         .ReturnsAsync(mockTimeEntries);

        // Act
        var result = await command.ExecuteAsync(context, settings);

        // Assert
        Assert.That(result, Is.EqualTo(0));
        // Command should handle empty time entries gracefully
        mockClockifyClient.Verify(x => x.GetTimeEntries(mockWorkspace, mockUser, It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Once);
    }

    [Test]
    public void Settings_DefaultValues_AreCorrect()
    {
        // Arrange & Act
        var settings = new WeekViewCommand.Settings();

        // Assert
        Assert.That(settings.IncludeCurrent, Is.False);
        Assert.That(settings.Detailed, Is.False);
    }

    [Test]
    public void Settings_CanSetCustomFlags()
    {
        // Arrange & Act
        var settings = new WeekViewCommand.Settings { IncludeCurrent = true, Detailed = true };

        // Assert
        Assert.That(settings.IncludeCurrent, Is.True);
        Assert.That(settings.Detailed, Is.True);
    }
}
